#include !\TTSCarcassonne\scripts\control_panel_common

ROW_1 = 6.5
ROW_2 = 1.1
ROW_3 = -2.95
ROW_4 = -7.1
ROW_5 = -11.4
COLUMN_1 = 7.9
COLUMN_2 = 6.25
COLUMN_3 = 2.95
COLUMN_4 = -0.4
COLUMN_5 = -3.75
COLUMN_6 = -7.1

NUM_TOWERS_PER_PLAYER = {[1] = 10, [2] = 10, [3] = 9, [4] = 7, [5] = 6, [6] = 5}
numPlayers = 1

function onLoad()
-- Base game
    initializeCheckbox(COLUMN_2, ROW_1, 'BaseTiles', "")

    button_parameters.click_function = 'onBaseFollowerDecr'
    button_parameters.label = '-'
    button_parameters.position = {COLUMN_3 + 1, BUTTON_HEIGHT, ROW_1}
    self.createButton( button_parameters )
    btnIDs['btnBaseFollowerDecr'] = index
    index = index + 1

    button_parameters.click_function = 'onBaseFollowerToggle'
    button_parameters.position = {COLUMN_3, BUTTON_HEIGHT, ROW_1}
    button_parameters.label = '7'
    self.createButton( button_parameters )
    btnIDs['btnBaseFollowerToggle'] = index
    index = index + 1

    button_parameters.click_function = 'onBaseFollowerIncr'
    button_parameters.label = '+'
    button_parameters.position = {COLUMN_3 - 1, BUTTON_HEIGHT, ROW_1}
    self.createButton( button_parameters )
    btnIDs['btnBaseFollowerIncr'] = index
    index = index + 1

--Inns & Cathedrals
    initializeAllCheckbox(COLUMN_1, ROW_2, 'InCAll', "")
    initializeCheckbox(COLUMN_2, ROW_2, 'InCTiles', "")
    initializeCheckbox(COLUMN_3, ROW_2, 'InCBigFollower', "Follower - The Big Follower has the same weight as 2 normal followers. This means that only 1 big follower is needed to steal a feature controlled by a player with only 1 normal follower. Even if the player had 2 normal followers, the points would still be shared.")
    initializeCheckbox(COLUMN_4, ROW_2, 'InCInns', "Roads with inns are granted double points when they are finished, but are given no points if they do not finish.")
    initializeCheckbox(COLUMN_5, ROW_2, 'InCCathedrals', "Cities with cathedrals are granted triple points when they are finished (instead of double), but are given no points if they do not finish.")

--Traders & Builders
    initializeAllCheckbox(COLUMN_1, ROW_3, 'TnBAll', "")
    initializeCheckbox(COLUMN_2, ROW_3, 'TnBTiles', "")
    initializeCheckbox(COLUMN_3, ROW_3, 'TnBBuilder', "Special Figure - The builder can be placed on any road or city which already has one of your followers. Once placed, anytime the owner of the builder adds to this feature, they will be able to draw an additional tile.")
    initializeCheckbox(COLUMN_4, ROW_3, 'TnBPig', "Special Figure - The pig can be placed on any field that already has one of your followers. At the end of the game, any field containing the pig (that scored points for the player) will score an additional 1 point per city")
    initializeCheckbox(COLUMN_5, ROW_3, 'TnBTradeGoods', "Trade goods icons are present in some cities on Traders and Builders tiles. When a player completes the city (regardless if it was controlled by that player), they will be awarded a token. The player with the most of each type of token will be awarded 10 points at the end of the game. Disabling this does not prevent tiles with trade token icons from being included, but it will prevent the tokens from being awarded.")

--The Princess & The Dragon
    initializeAllCheckbox(COLUMN_1, ROW_4, 'PnDAll', "")
    initializeCheckbox(COLUMN_2, ROW_4, 'PnDTiles', "")
    initializeCheckbox(COLUMN_3, ROW_4, 'PnDDragon', "Neutral Figure - The Dragon will be summoned when a tile with a volcano is drawn. Afterwards, each time a tile with a dragon icon is drawn, the dragon is moved by the players 6 times. The dragon eats most figures on each tile it is moved to. See rules for more details.")
    initializeCheckbox(COLUMN_4, ROW_4, 'PnDFairy', "Neutral Figure - The fairy can be moved instead of placing a follower on one's turn. The fairy does 3 things: gives 1 point to the follower next to it at the beginning of that follower's turn, gives 3 points when that follower's feature gets finished, and protects the tile from the dragon.")
    initializeCheckbox(COLUMN_5, ROW_4, 'PnDMagicPortal', "When a tile with a magic portal is drawn, the next follower may be placed on that tile or any other tile already played. The usual rules on follower placement must still be followed.")
    initializeCheckbox(COLUMN_6, ROW_4, 'PnDPrincess', "Placing a city with the princess will allow the placing player to remove one knight (follower) from the connected city, instead of placing a follower.")

--The Tower
    initializeAllCheckbox(COLUMN_1, ROW_5, 'TowerAll', "")
    initializeCheckbox(COLUMN_2, ROW_5, 'TowerTiles', "")

    button_parameters.click_function = 'onTowerDecr'
    button_parameters.label = '-'
    button_parameters.position = {COLUMN_3 + 1, BUTTON_HEIGHT, ROW_5}
    self.createButton( button_parameters )
    btnIDs['btnTowerDecr'] = index
    index = index + 1

    button_parameters.click_function = 'onTowerTowersToggle'
    button_parameters.label = '0'
    button_parameters.position = {COLUMN_3, BUTTON_HEIGHT, ROW_5}
    button_parameters.tooltip = "Tower - A tower can be placed on a Tower foundation or another tower to capture a follower. The taller a tower is built, the further its range."
    if Global.call('getControlPanelState', {key = 'TowerTowers'}) then
        button_parameters.label = '' .. Global.call('getControlPanelState', {key = 'TowerNumTowers'})
    end
    self.createButton( button_parameters )
    btnIDs['btnTowerTowersToggle'] = index
    index = index + 1

    button_parameters.click_function = 'onTowerIncr'
    button_parameters.label = '+'
    button_parameters.position = {COLUMN_3 - 1, BUTTON_HEIGHT, ROW_5}
    self.createButton( button_parameters )
    btnIDs['btnTowerIncr'] = index
    index = index + 1
end

function initializeAllCheckbox(x, z, key, description)
    local buttonGroup
    if key == 'InCAll' then buttonGroup = {'InCTiles', 'InCBigFollower', 'InCInns', 'InCCathedrals'}
    elseif key == 'TnBAll' then buttonGroup = {'TnBTiles', 'TnBBuilder', 'TnBPig', 'TnBTradeGoods'}
    elseif key == 'PnDAll' then buttonGroup = {'PnDTiles', 'PnDDragon', 'PnDFairy', 'PnDMagicPortal', 'PnDPrincess'}
    elseif key == 'TowerAll' then buttonGroup = {'TowerTiles', 'TowerTowers'}
    else return end
    local allChecked = true
    for _, setting_key in ipairs(buttonGroup) do
        if not Global.call('getControlPanelState', {key = setting_key}) then
            allChecked = false
        end
    end

    if allChecked then
        button_parameters.label = 'X'
    else
        button_parameters.label = ''
    end
    button_parameters.tooltip = description
    button_parameters.click_function = 'on' .. key .. 'Toggle'
    button_parameters.position = {x, BUTTON_HEIGHT, z}
    self.createButton( button_parameters )
    btnIDs['btn' .. key .. 'Toggle'] = index
    index = index + 1
end

function checkAllCheckboxes()
    for _, button_key in ipairs({'btnInCAllToggle', 'btnTnBAllToggle', 'btnPnDAllToggle', 'btnTowerAllToggle'}) do
        local buttonGroup
        if button_key == 'btnInCAllToggle' then buttonGroup = {'InCTiles', 'InCBigFollower', 'InCInns', 'InCCathedrals'}
        elseif button_key == 'btnTnBAllToggle' then buttonGroup = {'TnBTiles', 'TnBBuilder', 'TnBPig', 'TnBTradeGoods'}
        elseif button_key == 'btnPnDAllToggle' then buttonGroup = {'PnDTiles', 'PnDDragon', 'PnDFairy', 'PnDMagicPortal', 'PnDPrincess'}
        elseif button_key == 'btnTowerAllToggle' then buttonGroup = {'TowerTiles', 'TowerTowers'}
        else return end
        local allChecked = true
        for _, key in ipairs(buttonGroup) do
            if not Global.call('getControlPanelState', {key = key}) then
                allChecked = false
            end
        end

        if allChecked then
            self.editButton({index = btnIDs[button_key], label = 'X'})
        else
            self.editButton({index = btnIDs[button_key], label = ''})
        end
    end
end

function onAllButtonToggle(sPlayer, button_key)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    local buttonGroup
    if button_key == 'btnInCAllToggle' then buttonGroup = {'InCTiles', 'InCBigFollower', 'InCInns', 'InCCathedrals'}
    elseif button_key == 'btnTnBAllToggle' then buttonGroup = {'TnBTiles', 'TnBBuilder', 'TnBPig', 'TnBTradeGoods'}
    elseif button_key == 'btnPnDAllToggle' then buttonGroup = {'PnDTiles', 'PnDDragon', 'PnDFairy', 'PnDMagicPortal', 'PnDPrincess'}
    elseif button_key == 'btnTowerAllToggle' then buttonGroup = {'TowerTiles', 'TowerTowers'}
    else return end
    local allChecked = true
    for _, key in ipairs(buttonGroup) do
        if not Global.call('getControlPanelState', {key = key}) then
            allChecked = false
        end
    end
    local label
    local value
    if allChecked then
        label = ''
        value = false
    else
        label = 'X'
        value = true
    end
    self.editButton({index = btnIDs[button_key], label = label})
    for _, key in ipairs(buttonGroup) do
        if key == 'TowerTowers' then
            if Global.call('getControlPanelState', {key = 'TowerTowers'}) then
                Global.call('setControlPanelState', {key = 'TowerTowers', value = false})
                self.editButton({index = btnIDs['btnTowerTowersToggle'], label = '0'})
            else
                Global.call('setControlPanelState', {key = 'TowerTowers', value = true})
                self.editButton({index = btnIDs['btnTowerTowersToggle'], label = '' .. Global.call('getControlPanelState', {key = 'TowerNumTowers'})})
            end
        else
            self.editButton({index = btnIDs['btn' .. key .. 'Toggle'], label = label})
            Global.call('setControlPanelState', {key = key, value = value})
        end
    end
end

function onBaseTilesToggle(Object, sPlayer)
    printToColor("You currently cannot disable the base tiles.", sPlayer, {1,0,0})
    --onCheckboxToggle(sPlayer, 'BaseTiles', 'btnBaseTilesToggle')
end

function onBaseFollowerDecr(Object, sPlayer)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    local numFollowers = Global.call('getControlPanelState', {key = 'BaseNumFollowers'})
    numFollowers = numFollowers - 1
    if numFollowers < 0 then numFollowers = 0 end
    if numFollowers == 6 then
        printToColor("Warning: It is strongly recommended to leave the number of followers at 7", sPlayer, {1,0,0})
    end
    Global.call('setControlPanelState', {key = 'BaseNumFollowers', value = numFollowers})
    self.editButton({index = btnIDs['btnBaseFollowerToggle'], label = '' .. numFollowers})
end

function onBaseFollowerIncr(Object, sPlayer)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    local numFollowers = Global.call('getControlPanelState', {key = 'BaseNumFollowers'})
    numFollowers = numFollowers + 1
    if numFollowers > 16 then numFollowers = 16 end
    if numFollowers == 8 then
        printToColor("Warning: It is strongly recommended to leave the number of followers at 7", sPlayer, {1,0,0})
    end
    Global.call('setControlPanelState', {key = 'BaseNumFollowers', value = numFollowers})
    self.editButton({index = btnIDs['btnBaseFollowerToggle'], label = '' .. numFollowers})
end

function onBaseFollowerToggle(Object, sPlayer)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    if Global.call('getControlPanelState', {key = 'BaseFollower'}) then
        Global.call('setControlPanelState', {key = 'BaseFollower', value = false})
        self.editButton({index = btnIDs['btnBaseFollowerToggle'], label = '0'})
        printToColor("Warning: It is strongly recommended not to turn off followers", sPlayer, {1,0,0})
    else
        printToColor("Follower - The Follower is the basic piece of the player. It can be placed on cities, roads, fields, or cloisters (churches) to take control of that feature.", sPlayer, NEUTRAL_COLOR)
        Global.call('setControlPanelState', {key = 'BaseFollower', value = true})
        self.editButton({index = btnIDs['btnBaseFollowerToggle'], label = '' .. Global.call('getControlPanelState', {key = 'BaseNumFollowers'})})
    end
    checkAllCheckboxes()
end

function onInCAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'btnInCAllToggle')
end

function onInCTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'InCTiles', 'btnInCTilesToggle')
end

function onInCBigFollowerToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'InCBigFollower', 'btnInCBigFollowerToggle')
end

function onInCInnsToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'InCInns', 'btnInCInnsToggle')
end

function onInCCathedralsToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'InCCathedrals', 'btnInCCathedralsToggle')
end

function onTnBAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'btnTnBAllToggle')
end

function onTnBTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'TnBTiles', 'btnTnBTilesToggle')
end

function onTnBBuilderToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'TnBBuilder', 'btnTnBBuilderToggle')
end

function onTnBPigToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'TnBPig', 'btnTnBPigToggle')
end

function onTnBTradeGoodsToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'TnBTradeGoods', 'btnTnBTradeGoodsToggle')
end

function onPnDAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'btnPnDAllToggle')
end

function onPnDTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'PnDTiles', 'btnPnDTilesToggle')
end

function onPnDDragonToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'PnDDragon', 'btnPnDDragonToggle')
end

function onPnDFairyToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'PnDFairy', 'btnPnDFairyToggle')
end

function onPnDMagicPortalToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'PnDMagicPortal', 'btnPnDMagicPortalToggle')
end

function onPnDPrincessToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'PnDPrincess', 'btnPnDPrincessToggle')
end

function onTowerAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'btnTowerAllToggle')
end

function onTowerTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'TowerTiles', 'btnTowerTilesToggle')
end

function onTowerDecr(Object, sPlayer)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    local numTowers = Global.call('getControlPanelState', {key = 'TowerNumTowers'})
    numTowers = numTowers - 1
    if numTowers < 0 then numTowers = 0 end
    if numFollowers == NUM_TOWERS_PER_PLAYER[numPlayers] - 1 then
        printToColor("Warning: It is strongly recommended to leave the number of towers at the default number", sPlayer, {1,0,0})
    end
    Global.call('setControlPanelState', {key = 'TowerNumTowers', value = numTowers})
    self.editButton({index = btnIDs['btnTowerTowersToggle'], label = '' .. numTowers})
end

function onTowerIncr(Object, sPlayer)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    local numTowers = Global.call('getControlPanelState', {key = 'TowerNumTowers'})
    numTowers = numTowers + 1
    if numTowers > 30 then numTowers = 30 end
    if numFollowers == NUM_TOWERS_PER_PLAYER[numPlayers] + 1 then
        printToColor("Warning: It is strongly recommended to leave the number of towers at the default number", sPlayer, {1,0,0})
    end
    Global.call('setControlPanelState', {key = 'TowerNumTowers', value = numTowers})
    self.editButton({index = btnIDs['btnTowerTowersToggle'], label = '' .. numTowers})
end

function onTowerTowersToggle(Object, sPlayer)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    if Global.call('getControlPanelState', {key = 'TowerTowers'}) then
        Global.call('setControlPanelState', {key = 'TowerTowers', value = false})
        self.editButton({index = btnIDs['btnTowerTowersToggle'], label = '0'})
    else
        Global.call('setControlPanelState', {key = 'TowerTowers', value = true})
        self.editButton({index = btnIDs['btnTowerTowersToggle'], label = '' .. Global.call('getControlPanelState', {key = 'TowerNumTowers'})})
    end
    checkAllCheckboxes()
end

function onPlayerChangedColor(player)
    if not Global.getVar('gameover') then return end
    numPlayers = 0
    for _, color in ipairs(PLAYER_COLORS) do
        if Player[color].seated or Global.call('getControlPanelState', {key = color .. 'Control'}) ~= nil then
            numPlayers = numPlayers + 1
        end
    end
    if Global.call('getControlPanelState', {key = 'TowerTowers'}) then
        self.editButton({index = btnIDs['btnTowerTowersToggle'], label = '' .. NUM_TOWERS_PER_PLAYER[numPlayers]})
    end
end
