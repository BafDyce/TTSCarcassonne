--Helper Functions
--These are general purpose helpers to make coding in TTS easier

PLAYER_COLORS = {'Green', 'Purple', 'White', 'Blue', 'Red', 'Pink'}

NEUTRAL_COLOR = {r=0.5,g=0.5,b=0.5}
ERROR_COLOR = {r=1,g=0,b=0}

--will print a message to all players, but not to the log
function gameNotification(msg, rgb, target_color)
    if type(msg) == 'table' then
      msg = translate(msg)
    end
    if target_color == nil then
        printToAll(msg, rgb)
    else
        if controlPanelSettings[target_color .. 'Control'] ~= nil then
            target_color = controlPanelSettings[target_color .. 'Control']
        end
        for _, player in ipairs(Player.getPlayers()) do
            if player.color == target_color then
                player.broadcast(msg, rgb)
            else
                player.print(msg, rgb)
            end
        end
    end
end

--will print a message to all players, broadcasting to the target_color
--spectators will not receive this message if target_color is not nil
function allGameMessage(msg, rgb, target_color)
    if type(msg) == 'table' then
      msg = translate(msg)
    end
    if target_color == nil then
        printToAll(msg, rgb)
    else
        if controlPanelSettings[target_color .. 'Control'] ~= nil then
            target_color = controlPanelSettings[target_color .. 'Control']
        end
        for _, player in ipairs(Player.getPlayers()) do
            if player.color == target_color then
                player.broadcast(msg, rgb)
            else
                player.print(msg, rgb)
            end
        end
    end
    -- local params = {}
    -- notes = getNotebookTabs()
    --
    -- params.index = gameLogTabIndex
    -- params.body = notes[gameLogTabIndex].body .. "\n" .. msg
    -- editNotebookTab(params)
end

--will print an error message to all players
function allErrorMessage(msg, target_color)
    if type(msg) == 'table' then
      msg = translate(msg)
    end
    if target_color == nil then
        broadcastToAll(msg, ERROR_COLOR)
    else
        if controlPanelSettings[target_color .. 'Control'] ~= nil then
            target_color = controlPanelSettings[target_color .. 'Control']
        end
        for _, player in ipairs(Player.getPlayers()) do
            if player.color == target_color then
                player.broadcast(msg, ERROR_COLOR)
            else
                player.print(msg, ERROR_COLOR)
            end
        end
    end
end

--will print an error message to the target player
function playerErrorMessage(msg, target_color)
    if type(msg) == 'table' then
      msg = translate(msg)
    end
    local target_color_owner = nil
    if controlPanelSettings[target_color .. 'Control'] ~= nil then
        target_color_owner = controlPanelSettings[target_color .. 'Control']
    end
    if target_color_owner == nil then target_color_owner = target_color end
    if Player[target_color_owner].seated then
        broadcastToColor(msg, target_color_owner, ERROR_COLOR)
    else
        broadcastToColor("You are seated in another player's hotseat and cannot play.", target_color, ERROR_COLOR)
    end
end

--will print the message if the debug level is high enough
function debugMessage(messageDebugLevel, msg)
    if debugLevel >= messageDebugLevel then
        -- local params = {}
        -- notes = getNotebookTabs()
        --
        -- params.index = debugLogTabIndex
        -- params.body = notes[debugLogTabIndex].body .. "\n" .. msg
        -- editNotebookTab(params)
        print(msg)
    end
end

--will return a string in the form of bracketed hex codes (ie. [ffffff] for white) when passed the string name of the color
function stringToBracketedHex(color)
    return RGBToBracketedHex(player_color_tints[color])
end

--returns the bracketed hex color code for a color, which can be used to add colors to strings (ie. [ffffff] for white). input table must include correct rgb tags to work
function RGBToBracketedHex(rgb)
    if rgb ~= nil then
        return "[" .. string.format("%02x%02x%02x", rgb.r*255,rgb.g*255,rgb.b*255) .. "]"
    else
        return ""
    end
end

--perform takeObject only if the object exists in the container
function takeObjectSafe(container, params)
    if params.guid ~= nil then
        for _, item in pairs(container.getObjects()) do
            if item.guid == params.guid then
                return container.takeObject(params)
            end
        end
    else
        return container.takeObject(params)
    end
    printToAll("Warning: Object " .. params.guid .. " not found in container. It may have already been removed.", ERROR_COLOR)
end

--true if element is one of the elements of the table, otherwise false
--if element is a table, then checks if an identical table is in the table
function table.contains(table, element)
    if type(element) == 'table' then
        for _, subtable in pairs(table) do
            local allMatch = true
            for key, value in pairs(subtable) do
                if value ~= element[key] then
                    allMatch = false
                end
            end
            if allMatch then return true end
        end
    else
        for _, value in pairs(table) do
            if value == element then
                return true
            end
        end
    end
    return false
end

--non-recursive table copy
function table.shallow_copy(t)
  local t2 = {}
  for k,v in pairs(t) do
    t2[k] = v
  end
  return t2
end

--recursive table copy
function table.deep_copy(t)
  if type(t) ~= 'table' then return t end
  local res = setmetatable({}, getmetatable(t))
  for k, v in pairs(t) do res[table.deep_copy(k)] = table.deep_copy(v) end
  return res
end

-- Print contents of `tbl`, with indentation.
-- `indent` sets the initial level of indentation.
function table.print(tbl, indent)
  if not indent then indent = 0 end
  for k, v in pairs(tbl) do
    formatting = string.rep("  ", indent) .. k .. ": "
    if type(v) == "table" then
      print(formatting)
      table.print(v, indent+1)
    elseif type(v) == 'boolean' then
      print(formatting .. tostring(v))
    else
      print(formatting .. v)
    end
  end
end

--https://stackoverflow.com/a/7615129
function string.split(inputstr, sep)
    if sep == nil then
        sep = "%s"
    end
    local t={}
    local i=1
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
        t[i] = str
        i = i + 1
    end
    return t
end

--waits for the specified number of seconds. Can only be run from a coroutine
function wait(time)
  local start = os.clock()
  repeat coroutine.yield(0) until os.clock() > start + time
end

--isWithinErrorMargin
-- params:
--  float: number (to be compared)
--  float: targetNumber (to be compared to)
--  float: errorMargin
-- returns:
--  bool: true if number is within errorMargin of targetNumber
function isWithinErrorMargin(number, targetNumber, errorMargin)
    if number > targetNumber - errorMargin and number < targetNumber + errorMargin then return true
    else return false
    end
end

--rotates coordinates in steps of 90 degrees
--this is much quicker than the below rotateCoordinatesDegrees, since it doesn't use and complex math functions
function rotateCoordinates(x, z, rotation)
    if rotation == 1 then
        temp = x
        x = -z
        z = temp
    elseif rotation == 2 then
        x = -x
        z = -z
    elseif rotation == 3 then
        temp = x
        x = z
        z = -temp
    end
    return x, z
end

--rotates coordinates in degrees
function rotateCoordinatesDegrees(x, z, rotation)
    local rad_rotation = math.rad(rotation)
    local new_x = x * math.cos(rad_rotation) - z * math.sin(rad_rotation)
    local new_z = z * math.cos(rad_rotation) + x * math.sin(rad_rotation)
    return new_x, new_z
end
