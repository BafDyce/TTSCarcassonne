--manages save games by restoring script data
--in general, it is best to minimize the amount of data stored
--the game is not considered 100% save compatible due to issues with the TTS API
--for example, an object in the middle of a setPositionSmooth will not continue moving when loaded
--though whenever the game is awaiting user interaction, it should be 99% save compatible

function onload(save_state)
    if save_state ~= nil then
        local saved_data = JSON.decode(save_state)
        featureList = saved_data.featureList
        linkedFeatures = saved_data.linkedFeatures
        featureIndex = saved_data.featureIndex
        unusedTiles = saved_data.unusedTiles
        buriedTiles = saved_data.buriedTiles
        validTileLocations = saved_data.validTileLocations
        tileConnectionOdds = saved_data.tileConnectionOdds
        tilesRemaining = saved_data.tilesRemaining
        buriedTileCount = saved_data.buriedTileCount
        controlPanelSettings = saved_data.controlPanelSettings
        showMarkers = saved_data.showMarkers
        tileGrid = saved_data.tileGrid
        startingTile_GUID = saved_data.startingTile_GUID
        startingRiverTile_GUID = saved_data.startingRiverTile_GUID
        forkTile_GUID = saved_data.forkTile_GUID
        springTile_GUID = saved_data.springTile_GUID
        lakeTile_GUID = saved_data.lakeTile_GUID
        riverBodyTiles_GUID = saved_data.riverBodyTiles_GUID
        finalRiverTile_GUID = saved_data.finalRiverTile_GUID
        finalTile_GUID = saved_data.finalTile_GUID
        fairy_GUID = saved_data.fairy_GUID
        dragon_GUID = saved_data.dragon_GUID
        flierDie_GUID = saved_data.flierDie_GUID
        lastPlacedTileX = saved_data.lastPlacedTileX
        lastPlacedTileZ = saved_data.lastPlacedTileZ
        lastPlacedPlayerTiles = saved_data.lastPlacedPlayerTiles
        if saved_data.scores ~= nil then
            for player, score in pairs(saved_data.scores) do
                local scoreCounter = getObjectFromGUID(score_counter_guids[player])
                if scoreCounter ~= nil then
                    scoreCounter.Counter.setValue(score)
                end
            end
        end
        figurePositions = saved_data.figurePositions
        gameover = saved_data.gameover
        activePlayers = saved_data.activePlayers
        currentPlayer = saved_data.currentPlayer
        scoreSummary = saved_data.scoreSummary
        largestCity = saved_data.largestCity
        longestRoad = saved_data.longestRoad
        playerPossessionScriptingZones = saved_data.playerPossessionScriptingZones
        player_color_tints = saved_data.player_color_tints
        score_counter_guids = saved_data.score_counter_guids
        figurepad_GUIDs = saved_data.figurepad_GUIDs
        handColor = saved_data.handColor
        playerName = saved_data.playerName
        player_possession_areas = saved_data.player_possession_areas
        turnState = saved_data.turnState
        wagonFeatures = saved_data.wagonFeatures
        seducedKnights = saved_data.seducedKnights
        carcassonneFigures = saved_data.carcassonneFigures
        wofPigPosition = saved_data.wofPigPosition
        numberActiveTowers = saved_data.numberActiveTowers
        towerX = saved_data.towerX
        towerZ = saved_data.towerZ
        currentMiniTurn = saved_data.currentMiniTurn
        shepherdAwaitingAction = saved_data.shepherdAwaitingAction
        newBarn = saved_data.newBarn
        hasBuilderAwaitingAction = saved_data.hasBuilderAwaitingAction
        hasAlreadyTakenBuilderTile = saved_data.hasAlreadyTakenBuilderTile
        hasRansomedPrisoner = saved_data.hasRansomedPrisoner
        buriedTile = saved_data.buriedTile
        dragonHasAwaken = saved_data.dragonHasAwaken
        dragonMovesRemaining = saved_data.dragonMovesRemaining
        dragonIllegalTiles = saved_data.dragonIllegalTiles
        tileHasVolcano = saved_data.tileHasVolcano
        tileHasMagicPortal = saved_data.tileHasMagicPortal
        hasAlreadyUsedMagicPortal = saved_data.hasAlreadyUsedMagicPortal
        flier = saved_data.flier
        flierOffset = saved_data.flierOffset
        flierDirection = saved_data.flierDirection
        hasAlreadyUsedFlier = saved_data.hasAlreadyUsedFlier
        earnedPointsThisTile = saved_data.earnedPointsThisTile
        removedFigures = saved_data.removedFigures
        if saved_data.featureMarker_GUIDs ~= nil then
            for _, featureMarker_GUID in ipairs(saved_data.featureMarker_GUIDs) do
                getObjectFromGUID(featureMarker_GUID).destruct()
            end
        end
    end

    local notes = Notes.getNotebookTabs()
    for _, note in ipairs(notes) do
        if note.title == "Debug Log" then
            debugLogTabIndex = note.index
        end
        if note.title == "Game Log" then
            gameLogTabIndex = note.index
        end
    end
    -- params = {}
    -- params.title = "Debug Log"
    -- params.body = "LOG START"
    -- params.color = "Grey"
    -- debugLogTabIndex = Notes.addNotebookTab(params)

    initializeButtons()
    --setLocalizedObjectNames()

    if activePlayers ~= nil and currentPlayer ~= nil then
        if controlPanelSettings[activePlayers[currentPlayer] .. 'Control'] == nil then
            allGameMessage({"MESSAGE_GAME_LOADED", {'{p1}', getPlayerOwnerName(activePlayers[currentPlayer])}, {'{s1}', turnState}}, player_color_tints[activePlayers[currentPlayer]], activePlayers[currentPlayer])
        else
            allGameMessage({"MESSAGE_GAME_LOADED", {'{p1}', activePlayers[currentPlayer]}, {'{s1}', turnState}}, player_color_tints[activePlayers[currentPlayer]], activePlayers[currentPlayer])
            allGameMessage({"MESSAGE_GAME_LOADED_CONTROL", {'{c1}', activePlayers[currentPlayer]}, {'{c2}', stringToBracketedHex(controlPanelSettings[activePlayers[currentPlayer] .. 'Control']) .. getPlayerOwnerName(activePlayers[currentPlayer])}}, player_color_tints[activePlayers[currentPlayer]], nil)
        end
        allGameMessage({"MESSAGE_GAME_LOADED_REWIND_NOTIFICATION"}, NEUTRAL_COLOR)
    else
      -- for i, player in ipairs(getSeatedPlayers()) do
      --   local button_parameters = {}
      --     button_parameters.input_function = 'test_function'
      --     button_parameters.function_owner = Global
      --     button_parameters.label = '(Optional) Player Name - Will use steam name if left empty'
      --     button_parameters.position = {0.0, 0.0, 1.5}
      --     button_parameters.width = 1500
      --     button_parameters.height = 500
      --     button_parameters.font_size = 150
      --     button_parameters.font_color = {1, 0, 0}
      --     button_parameters.alignment = 2
      --     button_parameters.value = ''
      --     getObjectFromGUID(figurepad_GUIDs[player]).createInput(button_parameters)
      -- end
    end
    math.randomseed(os.time())
    progressPartiallyCompleteStates()
    if turnState ~= nil then
		if turnState ~= 'game over - scoring' then
			createRansomButtons()
            highlightLastPlacedTiles()
		end
        if controlPanelSettings[activePlayers[currentPlayer] .. 'Control'] ~= nil and controlPanelSettings[activePlayers[currentPlayer] .. 'Control']:sub(1,2) == 'AI' then
            return AIStateHandler()
        else
            return stateHandler()
        end
    end
    getObjectFromGUID(BUTTON_ANCHOR_GUID).interactable = false
end

-- function test_function()
--   print("test")
-- end

function onSave()
    --retrieve scores
    local scores = {}
    for player, scoreCounter_GUID in pairs(score_counter_guids) do
        local scoreCounter = getObjectFromGUID(scoreCounter_GUID)
        if scoreCounter ~= nil then
            scores[player] = scoreCounter.Counter.getValue()
        end
    end
    local featureMarker_GUIDs = {}
    if featureMarkers ~= nil then
        for i, featureMarker in ipairs(featureMarkers) do
            featureMarker_GUIDs[i] = featureMarker.getGUID()
        end
    end
    local toSave = {
        --settings changed by the control panel
        controlPanelSettings = controlPanelSettings,
        --setting for which markers should be shown
        showMarkers = showMarkers,
        --global storage of all active (in-play) tile information
        tileGrid = tileGrid,
        featureList = featureList,
        linkedFeatures = linkedFeatures,
        featureIndex = featureIndex,
        startingTile_GUID = startingTile_GUID,
        unusedTiles = unusedTiles,
        buriedTiles = buriedTiles,
        validTileLocations = validTileLocations,
        tileConnectionOdds = tileConnectionOdds,
        tilesRemaining = tilesRemaining,
        buriedTileCount = buriedTileCount,
        --keep track of these tiles to control the order that the AI places them
        startingRiverTile_GUID = startingRiverTile_GUID,
        forkTile_GUID = forkTile_GUID,
        springTile_GUID = springTile_GUID,
        lakeTile_GUID = lakeTile_GUID,
        riverBodyTiles_GUID = riverBodyTiles_GUID,
        finalRiverTile_GUID = finalRiverTile_GUID,
        finalTile_GUID = finalTile_GUID,
        --specific neutral figures that need to be tracked runtime
        fairy_GUID = fairy_GUID,
        dragon_GUID = dragon_GUID,
        flierDie_GUID = flierDie_GUID,
        --the most recent tile position placed
        lastPlacedTileX = lastPlacedTileX,
        lastPlacedTileZ = lastPlacedTileZ,
        lastPlacedPlayerTiles = lastPlacedPlayerTiles,
        scores = scores,
        figurePositions = figurePositions,
        gameover = gameover,
        activePlayers = activePlayers,
        currentPlayer = currentPlayer,
        scoreSummary = scoreSummary,
        largestCity = largestCity,
        longestRoad = longestRoad,
        playerPossessionScriptingZones = playerPossessionScriptingZones,
        --the following is only changed when using substitute colors
        player_color_tints = player_color_tints,
        score_counter_guids = score_counter_guids,
        figurepad_GUIDs = figurepad_GUIDs,
        handColor = handColor,
        playerName = playerName,
        player_possession_areas = player_possession_areas,
        --the following is partial turn data
        turnState = turnState,
        --wagonLocations = wagonLocations,
        wagonFeatures = wagonFeatures,
        seducedKnights = seducedKnights,
        carcassonneFigures = carcassonneFigures,
        wofPigPosition = wofPigPosition,
        numberActiveTowers = numberActiveTowers,
        towerX = towerX,
        towerZ = towerZ,
        --hasAvailableWagonFeature = hasAvailableWagonFeature,
        currentMiniTurn = currentMiniTurn,
        shepherdAwaitingAction = shepherdAwaitingAction,
        newBarn = newBarn,
        hasBuilderAwaitingAction = hasBuilderAwaitingAction,
        hasAlreadyTakenBuilderTile = hasAlreadyTakenBuilderTile,
        hasRansomedPrisoner = hasRansomedPrisoner,
        --the following is partial state data (for when a state doesn't completely finish)
        buriedTile = buriedTile,
        dragonHasAwaken = dragonHasAwaken,
        dragonIllegalTiles = dragonIllegalTiles,
        dragonMovesRemaining = dragonMovesRemaining,
        tileHasVolcano = tileHasVolcano,
        tileHasMagicPortal = tileHasMagicPortal,
        hasAlreadyUsedMagicPortal = hasAlreadyUsedMagicPortal,
        flier = flier,
        flierOffset = flierOffset,
        flierDirection = flierDirection,
        hasAlreadyUsedFlier = hasAlreadyUsedFlier,
        earnedPointsThisTile = earnedPointsThisTile,
        removedFigures = removedFigures,
        --if script was in the middle of making feature markers or deleting, delete them after loading
        featureMarker_GUIDs = featureMarker_GUIDs
    }
    return JSON.encode(toSave)
end
