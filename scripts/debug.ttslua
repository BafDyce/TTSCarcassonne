debugLevel = 0

function getDebugLevel()
    return debugLevel
end

function setDebugLevel(params)
    debugLevel = params.newDebugLevel
end

function debugShowTraversal()
    for xIndex, gridColumn in pairs(traversedFeaturePositions) do
        for zIndex, tileLocation in pairs(gridColumn) do
            for position, traversedFeaturePosition in pairs(tileLocation) do
                if position < 13 or getObjectFromGUID(tileGrid[xIndex][zIndex].tile_guid).getTable('specialFeatures')[position - 12][3] ~= nil then
                    local tile = getObjectFromGUID(tileGrid[xIndex][zIndex].tile_guid)
                    local rotation = tileGrid[xIndex][zIndex].rotation
                    local x, z = getFeatureLocation(position, tile, rotation)
                    if traversedFeaturePosition ~= 2 then
                        local params = {}
                        if traversedFeaturePosition == 1 then
                            params.type = "BlockSquare"
                        elseif traversedFeaturePosition == 2 then
                            params.type = "BlockTriangle"
                        end
                        params.position = {(x * TILE_SPACING) + (xIndex * TILE_SPACING) - MIDDLE_OFFSET.x, 1.5, (z * TILE_SPACING) + (zIndex * TILE_SPACING) - MIDDLE_OFFSET.z}
                        params.scale = {0.25, 0.25, 0.25}
                        params.callback = "identifyFeature"
                        params.sound = false
                        local newObject = spawnObject(params)
                        table.insert(featureMarkers, newObject)
                    end
                end
            end
        end
    end
    for xIndex, gridColumn in pairs(traversedGrid) do
        for zIndex, tileLocation in pairs(gridColumn) do
            for position, traversedPosition in pairs(tileLocation) do
                if position < 13 or getObjectFromGUID(tileGrid[xIndex][zIndex].tile_guid).getTable('specialFeatures')[position - 12][3] ~= nil then
                    local tile = getObjectFromGUID(tileGrid[xIndex][zIndex].tile_guid)
                    local rotation = tileGrid[xIndex][zIndex].rotation
                    local x, z = getFeatureLocation(position, tile, rotation)
                    local params = {}
                    if traversedPosition ~= nil and (traversedFeaturePositions[xIndex] == nil or traversedFeaturePositions[xIndex][zIndex] == nil or traversedFeaturePositions[xIndex][zIndex][position] == nil or traversedFeaturePositions[xIndex][zIndex][position] == 2) then
                        params.type = "BlockRectangle"
                    end
                    params.position = {(x * TILE_SPACING) + (xIndex * TILE_SPACING) - MIDDLE_OFFSET.x, 1.5, (z * TILE_SPACING) + (zIndex * TILE_SPACING) - MIDDLE_OFFSET.z}
                    params.scale = {0.25, 0.25, 0.25}
                    params.callback = "identifyFeature"
                    params.sound = false
                    local newObject = spawnObject(params)
                    table.insert(featureMarkers, newObject)
                end
            end
        end
    end
    Timer.create({identifier=os.clock(), function_name='deleteMarkers', function_owner=nil, parameters=nil, delay=8})
end

function debugShowFeatureMap()
    --this will break if the starting tile is moved
    local minX = MIDDLE_X_OFFSET
    local maxX = MIDDLE_X_OFFSET
    local minZ = MIDDLE_Z_OFFSET
    local maxZ = MIDDLE_Z_OFFSET
    local chatWindowMaxWidth
    if featureIndex < 100 then
        chatWindowMaxWidth = 11
    else
        chatWindowMaxWidth = 6
    end

    for xIndex, gridColumn in pairs(featureMap) do
        if xIndex < minX then minX = xIndex end
        if xIndex > maxX then maxX = xIndex end
        for zIndex, tileLocation in pairs(gridColumn) do
            if zIndex < minZ then minZ = zIndex end
            if zIndex > maxZ then maxZ = zIndex end
        end
    end

    local printColumnMinX = minX
    for printColumnMaxX = minX + chatWindowMaxWidth, maxX + chatWindowMaxWidth, chatWindowMaxWidth + 1 do
        if printColumnMaxX > maxX then printColumnMaxX = maxX end
        print("printing feature map x:" .. printColumnMinX .. "-" .. printColumnMaxX .. " z:" .. minZ .. "-" .. maxZ)
        for zIndex=maxZ, minZ, -1 do
            for i, positionRow in ipairs({{99, 5, 1, 6, 99}, {12, 99, 99, 99, 7}, {4, 99, 99, 99, 2}, {11, 99, 99, 99, 8}, {99, 10, 3, 9, 99}}) do
                local printLine = ""
                for xIndex=printColumnMinX, printColumnMaxX do
                    if featureMap[xIndex] ~= nil then
                        if featureMap[xIndex][zIndex] ~= nil then
                            local tilePositionRow = table.shallow_copy(positionRow)
                            if i >= 2 and i <= 4 then
                                for j=2, 4 do
                                    local closestPosition = findClosestPosition((j - 3) * 0.25, (3 - i) * 0.25, getObjectFromGUID(tileGrid[xIndex][zIndex].tile_guid), tileGrid[xIndex][zIndex].rotation, false)
                                    if closestPosition > 12 then
                                        tilePositionRow[j] = closestPosition
                                    end
                                end
                            end
                            for _, position in ipairs(tilePositionRow) do
                                if position == 99 then
                                    if featureIndex < 100 then
                                        printLine = printLine .. '    '
                                    else
                                        printLine = printLine .. '      '
                                    end
                                else
                                    -- local nameOfFeature
                                    -- if featureMap[xIndex][zIndex][position] ~= nil then
                                    --     nameOfFeature = featureList[featureMap[xIndex][zIndex][position]].nameOfFeature
                                    -- else
                                    --     nameOfFeature = featureList[featureMap[xIndex][zIndex][(position * 2) + 3]].nameOfFeature
                                    -- end
                                    -- printLine = printLine .. nameOfFeature:sub(1,1)

                                    local featureNum = featureMap[xIndex][zIndex][position]
                                    if featureNum == nil and position < 5 and featureMap[xIndex][zIndex][(position * 2) + 3] ~= nil and featureMap[xIndex][zIndex][(position * 2) + 3] == featureMap[xIndex][zIndex][(position * 2) + 4] then
                                        featureNum = featureMap[xIndex][zIndex][(position * 2) + 3]
                                    end
                                    if featureNum == nil then
                                        --print("no feature found for x:" .. xIndex .. " z:" .. zIndex .. " position:" .. position .. " on tile:" .. tileGrid[xIndex][zIndex].tile_guid)
                                        if featureIndex < 100 then
                                            featureNum = 'XX'
                                        else
                                            featureNum = 'XXX'
                                        end
                                    else
                                        featureNum = tonumber(featureNum)
                                        if featureIndex < 100 then
                                            if featureNum < 10 then featureNum = '0' .. featureNum end
                                        else
                                            if featureNum < 10 then featureNum = '00' .. featureNum elseif featureNum < 100 then featureNum = '0' .. featureNum end
                                        end
                                    end
                                    printLine = printLine .. featureNum
                                end
                            end
                        else
                            if featureIndex < 100 then
                                printLine = printLine .. '                    '
                            else
                                printLine = printLine .. '                              '
                            end
                        end
                    end
                end
                --substituing 1's for L's to keep the character width consistent
                printLine = printLine:gsub("1", "L")
                print(printLine)
            end
        end
        printColumnMinX = printColumnMinX + chatWindowMaxWidth + 1
    end
    print("printing features...")
    for featureKey, feature in pairs(featureList) do
        local specialFeatures = ""
        for i, specialFeature in ipairs(feature.specialFeatures) do
            specialFeatures = specialFeatures .. specialFeature
            if i ~= #feature.specialFeatures then
                specialFeatures = specialFeatures .. ", "
            end
        end
        local numFeatureOpenings = feature.openings
        local featureOpenings = ""
        for key, _ in pairs(feature.openingCoords) do
            featureOpenings = featureOpenings .. key .. ", "
        end
        featureOpenings = featureOpenings:sub(1, -3) --get rid of the last comma and space
        if feature.nameOfFeature ~= 'Road' and feature.nameOfFeature ~= 'River' and not table.contains(PROXIMITY_FEATURES, feature.nameOfFeature) then numFeatureOpenings = numFeatureOpenings / 2 end
        featureKey = "" .. tonumber(featureKey)
        featureKey = featureKey:gsub("1", "L")
        print(featureKey .. " (" .. feature.nameOfFeature .. "): has " .. feature.numTiles .. " tiles and " .. numFeatureOpenings .. " openings: " .. featureOpenings .. " Special Features: " .. specialFeatures)
    end
    print("printing links...")
    for linkType, originFeatures in pairs(linkedFeatures) do
        local printLine = linkType .. ": "
        local first = true
        for origin, destinationFeatures in pairs(originFeatures) do
            origin = tonumber(origin)
            local nestedFirst = true
            if not first then printLine = printLine .. "; " end
            first = false
            printLine = printLine .. origin .. " - "
            for destination, _ in pairs(destinationFeatures) do
                destination = tonumber(destination)
                if not nestedFirst then printLine = printLine .. ", " end
                nestedFirst = false
                printLine = printLine .. destination
            end
        end
        printLine = printLine:gsub("1", "L")
        print(printLine)
    end
end

function debugShowTileOdds()
    print("printing connection odds...")
    for openingCoord, tileOdds in pairs(tileConnectionOdds) do --iterate through all valid tile lists and remove the added tile
        local printLine = openingCoord .. ": "
        for key, numChances in pairs(tileOdds) do
            printLine = printLine .. key .. ":" .. numChances .. ", "
        end
        printLine = printLine:sub(1, -3) --get rid of the last comma and space
        print(printLine)
    end
end
